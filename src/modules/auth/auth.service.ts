import {
  HttpException,
  HttpStatus,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { User } from '@prisma/client';
import { compare, hash } from 'bcrypt';
import { mailService } from 'src/lib/mail.service';
import { RegisterDto } from 'src/modules/auth/dto/register.dto';
import { PrismaService } from 'src/prisma.service';

@Injectable()
export class AuthService {
  constructor(
    private prismaService: PrismaService,
    private jwtService: JwtService,
  ) {}

  generateVerificationCode(): { code: string; expiresAt: Date } {
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 5); // M√£ x√°c nh·∫≠n h·∫øt h·∫°n sau 5 ph√∫t
    return { code, expiresAt };
  }

  // G·ª≠i email x√°c th·ª±c
  async sendVerificationEmail(email: string, verificationCode: string) {
    const htmlTemplate = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Email Verification</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          background-color: #f4f4f4;
          margin: 0;
          padding: 0;
        }
        .container {
          width: 100%;
          max-width: 600px;
          margin: 0 auto;
          background-color: #ffffff;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .header {
          text-align: center;
          background-color: #007bff;
          color: white;
          padding: 15px;
          border-radius: 8px 8px 0 0;
        }
        .content {
          padding: 20px;
          font-size: 16px;
          color: #333333;
          line-height: 1.5;
        }
        .verification-code {
          display: block;
          width: fit-content;
          margin: 20px auto;
          background-color: #f4f4f4;
          padding: 15px 25px;
          font-size: 24px;
          font-weight: bold;
          color: #007bff;
          border: 2px solid #007bff;
          border-radius: 8px;
        }
        .footer {
          text-align: center;
          margin-top: 20px;
          font-size: 14px;
          color: #888888;
        }
        .footer a {
          color: #007bff;
          text-decoration: none;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>X√°c nh·∫≠n ƒêƒÉng k√Ω</h1>
        </div>
        <div class="content">
          <p>Ch√†o b·∫°n,</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n tr√™n n·ªÅn t·∫£ng Travel Golobe c·ªßa ch√∫ng t√¥i. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng nh·∫≠p m√£ x√°c th·ª±c d∆∞·ªõi ƒë√¢y:</p>
          <div class="verification-code">
            ${verificationCode}
          </div>
          <p>M√£ x√°c th·ª±c n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t. N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω, m√£ x√°c th·ª±c s·∫Ω kh√¥ng c√≤n gi√° tr·ªã.</p>
          <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y.</p>
        </div>
        <div class="footer">
          <p>Tr√¢n tr·ªçng,<br>Travel Golobe Team ‚ù§Ô∏èüêºüêßüöÄ‚ö°‚ö°</p>
        </div>
      </div>
    </body>
    </html>
    `;

    await mailService.sendMail({
      to: email,
      html: htmlTemplate,
      subject: 'X√°c nh·∫≠n ƒëƒÉng k√Ω',
    });
  }

  async register(userData: RegisterDto): Promise<any> {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await this.prismaService.user.findUnique({
      where: { email: userData.email },
    });

    if (existingUser) {
      throw new HttpException(
        { message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (userData.password !== userData.confirmPassword) {
      throw new HttpException(
        { message: 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await hash(userData.password, 10);
    const { code: verificationCode, expiresAt: verificationCodeExpiresAt } =
      this.generateVerificationCode(); // T·∫°o m√£ x√°c nh·∫≠n v√† th·ªùi gian h·∫øt h·∫°n

    // L·∫•y vai tr√≤ m·∫∑c ƒë·ªãnh
    const defaultRole = await this.prismaService.role.findUnique({
      where: { name: 'USER' },
    });

    if (!defaultRole) {
      throw new HttpException(
        { message: 'Kh√¥ng t√¨m th·∫•y vai tr√≤ m·∫∑c ƒë·ªãnh' },
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi tr·∫°ng th√°i ch∆∞a x√°c th·ª±c
    await this.prismaService.user.create({
      data: {
        email: userData.email,
        password: hashedPassword,
        confirmPassword: hashedPassword,
        name: userData.name,
        verificationCode: verificationCode,
        verificationCodeExpiresAt: verificationCodeExpiresAt, // L∆∞u th·ªùi gian h·∫øt h·∫°n
        isVerified: false,
        role: {
          connect: { id: defaultRole.id },
        },
      },
    });

    // G·ª≠i m√£ x√°c nh·∫≠n qua email
    await this.sendVerificationEmail(userData.email, verificationCode);

    return { message: 'Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n ƒëƒÉng k√Ω' };
  }

  // X√°c th·ª±c m√£ x√°c nh·∫≠n
  async verifyEmail(email: string, code: string): Promise<any> {
    const user = await this.prismaService.user.findUnique({
      where: { email },
    });

    if (!user) {
      throw new HttpException(
        { message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' },
        HttpStatus.NOT_FOUND,
      );
    }

    if (user.isVerified) {
      throw new HttpException(
        { message: 'Ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c' },
        HttpStatus.BAD_REQUEST,
      );
    }

    if (user.verificationCode !== code) {
      throw new HttpException(
        { message: 'M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng' },
        HttpStatus.BAD_REQUEST,
      );
    }

    const now = new Date();
    if (now > user.verificationCodeExpiresAt) {
      throw new HttpException(
        { message: 'M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi d√πng th√†nh ƒë√£ x√°c th·ª±c
    await this.prismaService.user.update({
      where: { email },
      data: {
        isVerified: true,
        verificationCode: null,
        verificationCodeExpiresAt: null,
      }, // X√≥a m√£ x√°c nh·∫≠n sau khi th√†nh c√¥ng
    });

    return { message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!' };
  }

  login = async (data: { email: string; password: string }): Promise<any> => {
    // step 1: checking user exists by email
    const user = await this.prismaService.user.findUnique({
      where: {
        email: data.email,
      },
      include: {
        role: true,
      },
    });

    if (!user) {
      throw new HttpException(
        { message: 'Account not found' },
        HttpStatus.UNAUTHORIZED,
      );
    }
    if (!user.isVerified) {
      throw new HttpException(
        { message: 'Account is not verified' },
        HttpStatus.UNAUTHORIZED,
      );
    }

    // step 2: checking password is correct
    const verify = await compare(data.password, user.password);
    if (!verify) {
      throw new HttpException(
        { message: 'Password is not correct' },
        HttpStatus.UNAUTHORIZED,
      );
    }

    // step 3: check if user has a role
    if (!user.role) {
      throw new HttpException(
        { message: 'User role not assigned' },
        HttpStatus.FORBIDDEN,
      );
    }

    // step 4: generate access_token and refresh_token
    const payload = {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role.name,
    };
    const access_token = await this.jwtService.signAsync(payload, {
      secret: process.env.ACCESS_TOKEN_KEY,
      expiresIn: '1h',
    });

    const refresh_token = await this.jwtService.signAsync(payload, {
      secret: process.env.REFRESH_TOKEN_KEY,
      expiresIn: '7d',
    });

    return {
      access_token,
      refresh_token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role.name,
      },
    };
  };

  createToken = async (id: string): Promise<string> => {
    if (!process.env.ACCESS_TOKEN_KEY) {
      throw new Error(
        'Access token secret key not found in environment variables.',
      );
    }

    return this.jwtService.sign(
      { id },
      {
        expiresIn: '7d',
        secret: process.env.ACCESS_TOKEN_KEY,
      },
    );
  };

  forgotPassword = async (data: { email: string }) => {
    const user = await this.prismaService.user.findUnique({
      where: {
        email: data.email,
      },
    });

    if (!user) {
      throw new HttpException(
        { message: `Email ${data.email} not found` },
        HttpStatus.UNAUTHORIZED,
      );
    }

    const access_token = await this.createToken(user.id);

    await mailService.sendMail({
      to: data.email,
      html: `Click <a href="http://localhost:5173/reset-password?access_token=${access_token}">here</a> to reset your password`,
      subject: 'Reset  password',
    });

    return {
      message:
        'Your password has been reset successfully. Please login with your new password.',
    };
  };
  resetPassword = async (data: User, newPassword: string) => {
    const user = await this.prismaService.user.findUnique({
      where: { id: data.id },
      select: {
        password: true,
      },
    });

    if (!user || !user.password) {
      throw new HttpException(
        { message: 'User password is missing' },
        HttpStatus.BAD_REQUEST,
      );
    }
    const isSamePassword = await compare(newPassword, user.password);
    if (isSamePassword) {
      throw new HttpException(
        { message: 'New password cannot be the same as the old password' },
        HttpStatus.BAD_REQUEST,
      );
    }

    const hashPassword = await hash(newPassword, 10);

    await this.prismaService.user.update({
      where: {
        id: data.id,
      },
      data: {
        password: hashPassword,
        confirmPassword: hashPassword,
      },
    });

    return { message: 'Password reset successfully' };
  };

  async validateToken(token: string): Promise<{ userId: string }> {
    try {
      const decoded = this.jwtService.verify(token);
      return { userId: decoded.sub };
    } catch (error) {
      throw new UnauthorizedException('Invalid token');
    }
  }

  async changePassword(
    user: User,
    current_password: string,
    newPassword: string,
    confirmPassword: string,
  ): Promise<any> {
    // Step 1: L·∫•y m·∫≠t kh·∫©u hi·ªán t·∫°i t·ª´ c∆° s·ªü d·ªØ li·ªáu
    const userRecord = await this.prismaService.user.findUnique({
      where: { id: user.id },
      select: {
        password: true,
      },
    });

    if (!userRecord || !userRecord.password) {
      throw new HttpException(
        { message: 'User password is missing' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // Step 2: X√°c nh·∫≠n m·∫≠t kh·∫©u hi·ªán t·∫°i (current_password)
    const isCurrentPasswordCorrect = await compare(
      current_password,
      userRecord.password,
    );
    if (!isCurrentPasswordCorrect) {
      throw new HttpException(
        { message: 'Current password is incorrect' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // Step 3: Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi c√≥ tr√πng v·ªõi m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng
    if (current_password === newPassword) {
      throw new HttpException(
        { message: 'New password cannot be the same as the current password' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // Step 4: X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi kh·ªõp v·ªõi confirm password
    if (newPassword !== confirmPassword) {
      throw new HttpException(
        { message: 'New password and confirm password do not match' },
        HttpStatus.BAD_REQUEST,
      );
    }

    // Step 5: Hash m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t trong c∆° s·ªü d·ªØ li·ªáu
    const hashedPassword = await hash(newPassword, 10);
    await this.prismaService.user.update({
      where: {
        id: user.id,
      },
      data: {
        password: hashedPassword,
      },
    });

    return { message: 'Password changed successfully' };
  }
}
