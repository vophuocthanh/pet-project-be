generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  password                  String
  phone                     String?
  address                   String?
  avatar                    String?
  name                      String
  date_of_birth             String?
  country                   String?
  createAt                  DateTime  @default(now())
  updateAt                  DateTime? @updatedAt
  confirmPassword           String?
  roleId                    String?
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  isVerified                Boolean   @default(false)
  role                      Role?     @relation(fields: [roleId], references: [id])
  points                    Int?      @default(0)

  flightCrawls      UserOnFlightCrawl[]
  hotelCrawlReviews HotelCrawlReview[]
  hotelCrawls       UserOnHotelCrawl[]
  bookings          Booking[]
  tours             UserOnTour[]
  tourReviews       TourReview[]
  reviewReplyTour   ReviewReplyTour[]
  reviewReplyHotel  ReviewReplyHotel[]
  roadVehicles      UserOnRoadVehicle[]
  Payment           Payment[]

  @@map("users")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model HotelCrawl {
  id                        String  @id @default(uuid())
  hotel_names               String
  location                  String
  price                     Float?
  score_hotels              Float?
  number_rating             Float?
  star_number               Float?
  received_time             String
  giveback_time             String
  description               String?
  hotel_link                String?
  place                     String?
  image                     String?
  image_2                   String?
  image_3                   String?
  image_4                   String?
  image_5                   String?
  userId                    String?
  number_of_seats_remaining Int?

  rooms             Room[]
  users             UserOnHotelCrawl[]
  hotelCrawlReviewa HotelCrawlReview[]
  bookings          Booking[]
  Tour              Tour[]

  @@map("hotel_crawl")
}

model Room {
  id          String     @id @default(uuid())
  hotelId     String
  type        RoomType
  pricePerDay Float
  available   Boolean    @default(true)
  hotel       HotelCrawl @relation(fields: [hotelId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]

  @@map("rooms")
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  DELUXE
}

model FlightCrawl {
  id                        String        @id @default(uuid())
  brand                     String
  price                     Float
  start_time                String
  start_day                 DateTime
  end_day                   DateTime
  end_time                  String
  trip_time                 String
  take_place                String
  destination               String
  trip_to                   String
  createAt                  DateTime      @default(now())
  updateAt                  DateTime      @updatedAt
  userId                    String?
  image                     String?
  number_of_seats_remaining Int?
  type_ticket               TicketType
  baggage_weight            BaggageWeight
  type                      FlightType?
  return_start_time         String? // Thời gian khởi hành chuyến về (nếu là khứ hồi)
  return_start_day          DateTime? // Ngày khởi hành chuyến về (nếu là khứ hồi)
  return_end_day            DateTime? // Ngày kết thúc chuyến về (nếu là khứ hồi)
  return_end_time           String? // Thời gian kết thúc chuyến về (nếu là khứ hồi)
  return_trip_time          String? // Thời gian hành trình chuyến về (nếu là khứ hồi)
  flightCode                String?       @unique

  users    UserOnFlightCrawl[]
  bookings Booking[]
  Ticket   Ticket[]
  Tour     Tour[]

  @@map("flight_crawl")
}

enum FlightType {
  ONE_WAY // Vé một chiều
  ROUND_TRIP // Vé khứ hồi
}

enum BaggageWeight {
  FREE_7KG
  WEIGHT_15KG
  WEIGHT_25KG
  WEIGHT_32KG
}

model Ticket {
  id             String        @id @default(uuid())
  type_ticket    TicketType
  price          Float
  baggage_weight BaggageWeight
  baggage_price  Float
  flightId       String
  flight         FlightCrawl   @relation(fields: [flightId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  Booking Booking[]
}

enum TicketType {
  ECONOMY
  BUSINESS
  FIRST_CLASS
}

model Tour {
  id                        String       @id @default(cuid())
  name                      String // Tên tour
  userId                    String
  description               String? // Mô tả tour
  price                     Float? // Giá tour
  original_price            Float? // Giá gốc
  createAt                  DateTime     @default(now())
  updateAt                  DateTime?    @updatedAt
  start_date                DateTime? // Ngày khởi hành
  end_date                  DateTime? // Ngày kết thúc
  starting_gate             String? // Nơi khởi hành
  sight_seeing              String? // Điểm tham quan
  cuisine                   String? // Ẩm thực
  suitable                  String? // Phù hợp
  ideal_time                String? // Thời gian lý tưởng
  road_vehicle              String? // Phương tiện
  voucher                   String? // Voucher
  time_trip                 String? // Thời gian hành trình
  baby_price                Float? // Giá em bé (dưới 2 tuổi)
  child_price               Float? // Giá trẻ em (2-12 tuổi)
  adult_price               Float? // Giá người lớn (từ 12 tuổi trở lên)
  type                      String?
  image                     String
  image_2                   String?
  image_3                   String?
  image_4                   String?
  image_5                   String?
  rating                    Float?       @default(1) // Đánh giá
  number_of_seats_remaining Int? // Số ghế còn lại
  totalAmount               Float? // Tổng số tiền
  hotelId                   String?
  hotel                     HotelCrawl?  @relation(fields: [hotelId], references: [id])
  flightId                  String?
  flight                    FlightCrawl? @relation(fields: [flightId], references: [id])
  roadVehicleId             String?
  roadVehicle               RoadVehicle? @relation(fields: [roadVehicleId], references: [id])
  tour_code                 String?

  bookings     Booking[]
  users        UserOnTour[]
  tourReviews  TourReview[]
  TripSchedule TripSchedule[]

  @@map("tours")
}

model TripSchedule {
  id       String   @id @default(cuid())
  tourId   String
  tour     Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  day      Int
  schedule String
  date     DateTime

  @@map("trip_schedules")
}

// Road vehicles (phương tiện đường bộ)

model RoadVehicle {
  id                        String    @id @default(cuid())
  brand                     String?
  price                     Float?
  number_of_seat            String?
  start_time                String?
  start_day                 DateTime?
  end_day                   DateTime?
  end_time                  String?
  trip_time                 String?
  take_place                String?
  destination               String?
  location                  String?
  isFavorite                Boolean?  @default(false)
  number_of_seats_remaining Int?
  image                     String?

  users    UserOnRoadVehicle[]
  bookings Booking[]
  Tour     Tour[]

  @@map("road_vehicles")
}

//  Booking in system

model Booking {
  id            String  @id @default(uuid())
  tourId        String?
  userId        String
  flightCrawlId String?
  hotelCrawlId  String?
  roadVehicleId String?

  tour         Tour?        @relation(fields: [tourId], references: [id])
  flightCrawls FlightCrawl? @relation(fields: [flightCrawlId], references: [id])
  hotelCrawls  HotelCrawl?  @relation(fields: [hotelCrawlId], references: [id])
  roadVehicles RoadVehicle? @relation(fields: [roadVehicleId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  flightQuantity      Int?
  hotelQuantity       Int?
  tourQuantity        Int?
  roadVehicleQuantity Int?

  flightPrice      Float?
  hotelPrice       Float?
  tourPrice        Float?
  roadVehiclePrice Float?

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  ticketFlighttId String?
  ticket          Ticket? @relation(fields: [ticketFlighttId], references: [id])

  totalAmount Float?

  createdAt DateTime @default(now())

  checkInDate  DateTime?
  checkOutDate DateTime?

  flightDate DateTime?

  status BookingStatus @default(PENDING)

  confirmationTime DateTime?

  Payment Payment[]

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  SUCCESS
  WAITING_PAYMENT
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String?
  userId        String
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus
  orderId       String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime?     @updatedAt

  booking Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  user    User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

//  Review

model TourReview {
  id       String    @id @default(cuid())
  content  String
  rating   Float?    @default(1)
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  userId   String
  users    User      @relation(fields: [userId], references: [id])
  tourId   String
  tours    Tour      @relation(fields: [tourId], references: [id])

  reviewReplyTour ReviewReplyTour[]

  @@map("tour_reviews")
}

model HotelCrawlReview {
  id               String             @id @default(cuid())
  content          String
  rating           Float?             @default(1)
  createAt         DateTime           @default(now())
  updateAt         DateTime?          @updatedAt
  userId           String
  users            User               @relation(fields: [userId], references: [id])
  hotelCrawlId     String
  hotelCrawls      HotelCrawl         @relation(fields: [hotelCrawlId], references: [id])
  ReviewReplyHotel ReviewReplyHotel[]

  @@map("hotel_crawl_reviews")
}

model ReviewReplyHotel {
  id            String             @id @default(cuid())
  content       String
  review        HotelCrawlReview   @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime           @default(now())
  updateAt      DateTime           @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyHotel?  @relation("ReplyToParentHotel", fields: [parentReplyId], references: [id])
  replies       ReviewReplyHotel[] @relation("ReplyToParentHotel")

  @@map("replies_hotel")
}

model ReviewReplyTour {
  id            String            @id @default(cuid())
  content       String
  review        TourReview        @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime          @default(now())
  updateAt      DateTime          @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyTour?  @relation("ReplyToParentTour", fields: [parentReplyId], references: [id])
  replies       ReviewReplyTour[] @relation("ReplyToParentTour")

  @@map("replies_tour")
}

model UserOnTour {
  userId String
  users  User   @relation(fields: [userId], references: [id])
  tourId String
  tours  Tour   @relation(fields: [tourId], references: [id])

  @@id([userId, tourId])
  @@map("user_on_tours")
}

model UserOnFlightCrawl {
  userId        String
  users         User        @relation(fields: [userId], references: [id])
  flightCrawlId String
  flightCrawls  FlightCrawl @relation(fields: [flightCrawlId], references: [id])

  @@id([userId, flightCrawlId])
  @@map("user_on_flight_crawls")
}

model UserOnHotelCrawl {
  userId       String
  users        User       @relation(fields: [userId], references: [id])
  hotelCrawlId String
  hotelCrawls  HotelCrawl @relation(fields: [hotelCrawlId], references: [id])

  @@id([userId, hotelCrawlId])
  @@map("user_on_hotel_crawls")
}

model UserOnRoadVehicle {
  userId        String
  users         User         @relation(fields: [userId], references: [id])
  roadVehicleId String
  roadVehicles  RoadVehicle? @relation(fields: [roadVehicleId], references: [id])

  @@id([userId, roadVehicleId])
  @@map("user_on_road_vehicles")
}
