generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  password                  String
  phone                     String?
  address                   String?
  avatar                    String?
  name                      String
  date_of_birth             String?
  country                   String?
  createAt                  DateTime  @default(now())
  updateAt                  DateTime? @updatedAt
  confirmPassword           String?
  roleId                    String?
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  isVerified                Boolean   @default(false)
  role                      Role?     @relation(fields: [roleId], references: [id])

  flightCrawls           UserOnFlightCrawl[]
  flightCrawlReviews     FlightCrawlReview[]
  hotelCrawlReviews      HotelCrawlReview[]
  hotelCrawls            UserOnHotelCrawl[]
  bookings               Booking[]
  tours                  UserOnTour[]
  tourReviews            TourReview[]
  reviewReply            ReviewReplyFlight[]
  reviewReplyTour        ReviewReplyTour[]
  reviewReplyHotel       ReviewReplyHotel[]
  UserFlightFavorite     UserFlightFavorite[]
  roadVehicles           UserOnRoadVehicle[]
  roadVehicleReview      RoadVehicleReview[]
  reviewReplyRoadVehicle ReviewReplyRoadVehicle[]
  hotelFavorites         HotelFavorite[]
  flightFavorites        FlightFavorite[]
  tourFavorites          TourFavorite[]
  roadVehicleFavorites   RoadVehicleFavorite[]
  InvoiceDetail          InvoiceDetail[]
  Payment                Payment[]

  @@map("users")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model HotelCrawl {
  id                        String  @id @default(uuid())
  hotel_names               String
  location                  String
  price                     Float?
  score_hotels              Float?
  number_rating             Float?
  star_number               Float?
  received_time             String
  giveback_time             String
  description               String
  hotel_link                String
  place                     String
  image                     String?
  image_2                   String?
  image_3                   String?
  image_4                   String?
  image_5                   String?
  userId                    String?
  number_of_seats_remaining Int?

  rooms             Room[]
  users             UserOnHotelCrawl[]
  hotelCrawlReviewa HotelCrawlReview[]
  bookings          Booking[]
  hotelFavorites    HotelFavorite[]

  @@map("hotel_crawl")
}

model Room {
  id          String     @id @default(uuid())
  hotelId     String
  type        RoomType
  pricePerDay Float
  available   Boolean    @default(true)
  hotel       HotelCrawl @relation(fields: [hotelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rooms")
}

enum RoomType {
  SINGLE
  DOUBLE
  SUITE
  DELUXE
}

model HotelFavorite {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  hotel      HotelCrawl @relation(fields: [hotelId], references: [id])
  hotelId    String
  isFavorite Boolean    @default(false)
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?  @updatedAt

  @@unique([userId, hotelId])
  @@map("hotel_favorites")
}

model FlightCrawl {
  id                        String        @id @default(uuid())
  brand                     String
  price                     Float
  start_time                String
  start_day                 DateTime
  end_day                   DateTime
  end_time                  String
  trip_time                 String
  take_place                String
  destination               String
  trip_to                   String
  createAt                  DateTime      @default(now())
  updateAt                  DateTime      @updatedAt
  userId                    String?
  image                     String?
  number_of_seats_remaining Int?
  type_ticket               TicketType
  baggage_weight            BaggageWeight

  users           UserOnFlightCrawl[]
  flightReviews   FlightCrawlReview[]
  bookings        Booking[]
  flightFavorites FlightFavorite[]
  Ticket          Ticket[]

  @@map("flight_crawl")
}

enum BaggageWeight {
  FREE_7KG
  WEIGHT_15KG
  WEIGHT_25KG
  WEIGHT_32KG
}

model Ticket {
  id             String        @id @default(uuid())
  type_ticket    TicketType
  price          Float
  baggage_weight BaggageWeight
  baggage_price  Float
  flightId       String
  flight         FlightCrawl   @relation(fields: [flightId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum TicketType {
  ECONOMY
  BUSINESS
  FIRST_CLASS
}

model FlightFavorite {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  flightCrawl FlightCrawl @relation(fields: [flightId], references: [id])
  flightId    String
  isFavorite  Boolean?    @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt

  @@unique([userId, flightId])
  @@map("flight_favorites")
}

model Tour {
  id                        String    @id @default(cuid())
  name                      String // Tên tour
  userId                    String
  description               String? // Mô tả tour
  price                     Float? // Giá tour
  original_price            Float? // Giá gốc
  createAt                  DateTime  @default(now())
  updateAt                  DateTime? @updatedAt
  start_date                DateTime? // Ngày khởi hành
  end_date                  DateTime? // Ngày kết thúc
  starting_gate             String? // Nơi khởi hành
  sight_seeing              String? // Điểm tham quan
  cuisine                   String? // Ẩm thực
  suitable                  String? // Phù hợp
  ideal_time                String? // Thời gian lý tưởng
  road_vehicle              String? // Phương tiện
  voucher                   String? // Voucher
  time_trip                 String? // Thời gian hành trình
  baby_price                Float? // Giá em bé (dưới 2 tuổi)
  child_price               Float? // Giá trẻ em (2-12 tuổi)
  adult_price               Float? // Giá người lớn (từ 12 tuổi trở lên)
  image                     String
  image_2                   String?
  image_3                   String?
  image_4                   String?
  image_5                   String?
  rating                    Float?    @default(1) // Đánh giá
  number_of_seats_remaining Int? // Số ghế còn lại

  bookings      Booking[]
  users         UserOnTour[]
  tourReviews   TourReview[]
  tourFavorites TourFavorite[]

  @@map("tours")
}

model TourFavorite {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  tourId     String
  tour       Tour      @relation(fields: [tourId], references: [id])
  isFavorite Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([userId, tourId])
  @@map("tour_favorites")
}

// Road vehicles (phương tiện đường bộ)

model RoadVehicle {
  id             String   @id @default(cuid())
  brand          String // Hãng xe
  price          Float // Giá vé hoặc chi phí di chuyển
  number_of_seat String // Số ghế
  start_time     String // Thời gian khởi hành
  start_day      DateTime // Ngày khởi hành
  end_day        DateTime // Ngày kết thúc
  end_time       String // Thời gian kết thúc
  trip_time      String // Thời gian hành trình
  take_place     String // Điểm xuất phát
  destination    String // Điểm đến
  location       String
  isFavorite     Boolean? @default(false)

  users               UserOnRoadVehicle[]
  bookings            Booking[]
  roadVehicleReview   RoadVehicleReview[]
  roadVehicleFavorite RoadVehicleFavorite[]

  @@map("road_vehicles")
}

model RoadVehicleFavorite {
  id            String   @id @default(uuid())
  userId        String
  roadVehicleId String
  createdAt     DateTime @default(now())

  roadVehicle RoadVehicle @relation(fields: [roadVehicleId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@unique([userId, roadVehicleId])
  @@map("road_vehicle_favorites")
}

model UserFlightFavorite {
  id        String   @id @default(uuid())
  userId    String
  flightId  String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, flightId])
  @@map("user_flight_favorites")
}

//  Booking in system

model Booking {
  id            String  @id @default(uuid())
  tourId        String?
  userId        String
  flightCrawlId String?
  hotelCrawlId  String?
  roadVehicleId String?

  tour         Tour?        @relation(fields: [tourId], references: [id])
  flightCrawls FlightCrawl? @relation(fields: [flightCrawlId], references: [id])
  hotelCrawls  HotelCrawl?  @relation(fields: [hotelCrawlId], references: [id])
  roadVehicles RoadVehicle? @relation(fields: [roadVehicleId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  flightQuantity      Int? // Số lượng đặt chuyến bay
  hotelQuantity       Int? // Số lượng đặt khách sạn
  tourQuantity        Int? // Số lượng đặt tour
  roadVehicleQuantity Int? // Số lượng đặt phương tiện đường bộ

  flightPrice      Float? // Giá của chuyến bay
  hotelPrice       Float? // Giá của khách sạn
  tourPrice        Float? // Giá của tour
  roadVehiclePrice Float? // Giá của phương tiện đường bộ

  totalAmount Float? // Tổng số tiền cho toàn bộ dịch vụ

  createdAt DateTime @default(now())

  // Trạng thái đặt chỗ
  status BookingStatus @default(PENDING) // Trạng thái mặc định là chờ xác nhận

  // Thời gian xác nhận
  confirmationTime DateTime?

  InvoiceDetail InvoiceDetail[]
  Payment       Payment[] // Quan hệ với bảng Payment

  @@map("bookings")
}

enum BookingStatus {
  PENDING // Chờ xác nhận
  CONFIRMED // Đã xác nhận
  CANCELED // Đã hủy
  SUCCESS // Thành công
}

model Payment {
  id            String        @id @default(cuid()) // ID của giao dịch thanh toán
  bookingId     String        // ID của đơn đặt phòng
  userId        String        // ID của người dùng
  amount        Float         // Số tiền thanh toán
  paymentMethod PaymentMethod // Phương thức thanh toán
  status        PaymentStatus // Trạng thái thanh toán
  orderId       String?        @unique// ID đơn hàng từ cổng thanh toán
  createdAt     DateTime      @default(now()) // Thời gian tạo
  updatedAt     DateTime?     @updatedAt // Thời gian cập nhật (nếu có)

  booking       Booking        @relation(fields: [bookingId], references: [id]) // Liên kết với mô hình Booking
  user          User           @relation(fields: [userId], references: [id]) // Liên kết với mô hình User

  InvoiceDetail InvoiceDetail[] // Liên kết tới InvoiceDetail (nếu có)

  @@map("payments") // Tên bảng trong cơ sở dữ liệu
}


enum PaymentMethod {
  CASH // Thanh toán bằng tiền mặt
  CREDIT_CARD // Thanh toán bằng thẻ tín dụng
  DEBIT_CARD // Thanh toán bằng thẻ ghi nợ
  PAYPAL // Thanh toán qua PayPal
  BANK_TRANSFER // Thanh toán qua chuyển khoản ngân hàng
}

enum PaymentStatus {
  PENDING // Thanh toán đang chờ xử lý
  COMPLETED // Thanh toán đã hoàn tất
  FAILED // Thanh toán thất bại
}

model InvoiceDetail {
  id        String   @id @default(uuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id])

  flightQuantity      Int?
  hotelQuantity       Int?
  tourQuantity        Int?
  roadVehicleQuantity Int?

  flightPrice      Float?
  hotelPrice       Float?
  tourPrice        Float?
  roadVehiclePrice Float?
  totalAmount      Float?

  createdAt DateTime @default(now())

  @@map("invoice_details")
}

//  Review

model TourReview {
  id       String    @id @default(cuid())
  content  String
  rating   Float?    @default(1)
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  userId   String
  users    User      @relation(fields: [userId], references: [id])
  tourId   String
  tours    Tour      @relation(fields: [tourId], references: [id])

  reviewReplyTour ReviewReplyTour[]

  @@map("tour_reviews")
}

model FlightCrawlReview {
  id                String              @id @default(cuid())
  content           String
  rating            Float?              @default(1)
  createAt          DateTime            @default(now())
  updateAt          DateTime?           @updatedAt
  userId            String
  users             User                @relation(fields: [userId], references: [id])
  flightCrawlId     String
  flightCrawls      FlightCrawl         @relation(fields: [flightCrawlId], references: [id])
  ReviewReplyFlight ReviewReplyFlight[]

  @@map("flight_crawl_reviews")
}

model HotelCrawlReview {
  id               String             @id @default(cuid())
  content          String
  rating           Float?             @default(1)
  createAt         DateTime           @default(now())
  updateAt         DateTime?          @updatedAt
  userId           String
  users            User               @relation(fields: [userId], references: [id])
  hotelCrawlId     String
  hotelCrawls      HotelCrawl         @relation(fields: [hotelCrawlId], references: [id])
  ReviewReplyHotel ReviewReplyHotel[]

  @@map("hotel_crawl_reviews")
}

model RoadVehicleReview {
  id                     String                   @id @default(cuid())
  content                String
  rating                 Float?                   @default(1)
  createAt               DateTime                 @default(now())
  updateAt               DateTime?                @updatedAt
  userId                 String
  users                  User                     @relation(fields: [userId], references: [id])
  roadVehicleId          String
  roadVehicles           RoadVehicle?             @relation(fields: [roadVehicleId], references: [id])
  ReviewReplyRoadVehicle ReviewReplyRoadVehicle[]

  @@map("road_vehicle_reviews")
}

model ReviewReplyFlight {
  id            String              @id @default(cuid())
  content       String
  review        FlightCrawlReview   @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User                @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime            @default(now())
  updateAt      DateTime            @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyFlight?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyFlight[] @relation("ReplyToParent")

  @@map("replies_flight")
}

model ReviewReplyHotel {
  id            String             @id @default(cuid())
  content       String
  review        HotelCrawlReview   @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime           @default(now())
  updateAt      DateTime           @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyHotel?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyHotel[] @relation("ReplyToParent")

  @@map("replies_hotel")
}

model ReviewReplyTour {
  id            String            @id @default(cuid())
  content       String
  review        TourReview        @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime          @default(now())
  updateAt      DateTime          @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyTour?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyTour[] @relation("ReplyToParent")

  @@map("replies_tour")
}

model ReviewReplyRoadVehicle {
  id            String                   @id @default(cuid())
  content       String
  review        RoadVehicleReview        @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User                     @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime                 @default(now())
  updateAt      DateTime                 @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyRoadVehicle?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyRoadVehicle[] @relation("ReplyToParent")

  @@map("replies_road_vehicle")
}

model UserOnTour {
  userId String
  users  User   @relation(fields: [userId], references: [id])
  tourId String
  tours  Tour   @relation(fields: [tourId], references: [id])

  @@id([userId, tourId])
  @@map("user_on_tours")
}

model UserOnFlightCrawl {
  userId        String
  users         User        @relation(fields: [userId], references: [id])
  flightCrawlId String
  flightCrawls  FlightCrawl @relation(fields: [flightCrawlId], references: [id])

  @@id([userId, flightCrawlId])
  @@map("user_on_flight_crawls")
}

model UserOnHotelCrawl {
  userId       String
  users        User       @relation(fields: [userId], references: [id])
  hotelCrawlId String
  hotelCrawls  HotelCrawl @relation(fields: [hotelCrawlId], references: [id])

  @@id([userId, hotelCrawlId])
  @@map("user_on_hotel_crawls")
}

model UserOnRoadVehicle {
  userId        String
  users         User         @relation(fields: [userId], references: [id])
  roadVehicleId String
  roadVehicles  RoadVehicle? @relation(fields: [roadVehicleId], references: [id])

  @@id([userId, roadVehicleId])
  @@map("user_on_road_vehicles")
}
