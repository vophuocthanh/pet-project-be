generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  password                  String
  phone                     String?
  address                   String?
  avatar                    String?
  name                      String
  date_of_birth             String?
  country                   String?
  createAt                  DateTime  @default(now())
  updateAt                  DateTime? @updatedAt
  confirmPassword           String?
  roleId                    String?
  verificationCode          String?
  verificationCodeExpiresAt DateTime?
  isVerified                Boolean   @default(false)
  role                      Role?     @relation(fields: [roleId], references: [id])

  flightCrawls       UserOnFlightCrawl[]
  flightCrawlReviews FlightCrawlReview[]
  hotelCrawlReviews  HotelCrawlReview[]
  hotelCrawls        UserOnHotelCrawl[]
  bookings           Booking[]
  tours              UserOnTour[]
  tourReviews        TourReview[]
  location           CustomLocation[]
  reviewReply        ReviewReplyFlight[]
  reviewReplyTour    ReviewReplyTour[]
  reviewReplyHotel   ReviewReplyHotel[]
  UserFlightFavorite UserFlightFavorite[]

  @@map("users")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("roles")
}



model HotelCrawl {
  id            String  @id @default(uuid())
  hotel_names   String
  location      String
  price         Float?
  score_hotels  Float?
  number_rating Float?
  star_number   Float?
  received_time String
  giveback_time String
  description   String
  hotel_link    String
  place         String
  image         String?
  image_2       String?
  image_3       String?
  image_4       String?
  image_5       String?
  userId        String?

  users             UserOnHotelCrawl[]
  hotelCrawlReviewa HotelCrawlReview[]
  bookings          Booking[]

  @@map("hotel_crawl")
}


model FlightCrawl {
  id          String   @id @default(uuid())
  brand       String
  price       Float
  start_time  String
  start_day   DateTime
  end_day     DateTime
  end_time    String
  trip_time   String
  take_place  String
  destination String
  trip_to     String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  userId      String?
  image       String?

  users         UserOnFlightCrawl[]
  flightReviews FlightCrawlReview[]
  bookings      Booking[]

  @@map("flight_crawl")
}

model Tour {
  id             String         @id @default(cuid())
  name           String
  userId         String
  description    String?
  locationId     String
  location       CustomLocation @relation(fields: [locationId], references: [id])
  price          Float?
  createAt       DateTime       @default(now())
  updateAt       DateTime?      @updatedAt
  remainingCount Int?
  image          String
  image_2        String?
  image_3        String?
  image_4        String?
  image_5        String?
  images         String[]
  transport      String?
  hotel          String?
  startLocation  String?
  endLocation    String?
  rating         Float?         @default(1)

  bookings    Booking[]
  users       UserOnTour[]
  tourReviews TourReview[]

  @@map("tours")
}

// Road vehicles (phương tiện đường bộ)

model RoadVehicle {
  id             String   @id @default(cuid())
  brand          String // Hãng xe
  price          Float // Giá vé hoặc chi phí di chuyển
  number_of_seat String // Số ghế
  start_time     String // Thời gian khởi hành
  start_day      DateTime // Ngày khởi hành
  end_day        DateTime // Ngày kết thúc
  end_time       String // Thời gian kết thúc
  trip_time      String // Thời gian hành trình
  take_place     String // Điểm xuất phát
  destination    String // Điểm đến
  location       String

  @@map("road_vehicles")
}

model Airline {
  id          String    @id @default(uuid())
  name        String    @unique
  logo        String
  description String?
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt

  @@map("airlines")
}

model UserFlightFavorite {
  id        String   @id @default(uuid())
  userId    String
  flightId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, flightId])
  @@map("user_flight_favorites")
}

//  Booking in system

model Booking {
  id       String  @id @default(uuid())
  tourId        String?
  userId        String
  flightCrawlId String?
  flightCrawls  FlightCrawl? @relation(fields: [flightCrawlId], references: [id])
  hotelCrawlId  String?
  hotelCrawls   HotelCrawl?  @relation(fields: [hotelCrawlId], references: [id])
  tour          Tour?        @relation(fields: [tourId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())

  totalAmount    Float?

  @@map("bookings")
}

//  Review

model TourReview {
  id       String    @id @default(cuid())
  content  String
  rating   Float?    @default(1)
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  userId   String
  users    User      @relation(fields: [userId], references: [id])
  tourId   String
  tours    Tour      @relation(fields: [tourId], references: [id])

  reviewReplyTour ReviewReplyTour[]

  @@map("tour_reviews")
}

model FlightCrawlReview {
  id                String              @id @default(cuid())
  content           String
  rating            Float?              @default(1)
  createAt          DateTime            @default(now())
  updateAt          DateTime?           @updatedAt
  userId            String
  users             User                @relation(fields: [userId], references: [id])
  flightCrawlId     String
  flightCrawls      FlightCrawl         @relation(fields: [flightCrawlId], references: [id])
  ReviewReplyFlight ReviewReplyFlight[]

  @@map("flight_crawl_reviews")
}

model HotelCrawlReview {
  id               String             @id @default(cuid())
  content          String
  rating           Float?             @default(1)
  createAt         DateTime           @default(now())
  updateAt         DateTime?          @updatedAt
  userId           String
  users            User               @relation(fields: [userId], references: [id])
  hotelCrawlId     String
  hotelCrawls      HotelCrawl         @relation(fields: [hotelCrawlId], references: [id])
  ReviewReplyHotel ReviewReplyHotel[]

  @@map("hotel_crawl_reviews")
}

model ReviewReplyFlight {
  id            String              @id @default(cuid())
  content       String
  review        FlightCrawlReview   @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User                @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime            @default(now())
  updateAt      DateTime            @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyFlight?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyFlight[] @relation("ReplyToParent")

  @@map("replies_flight")
}

model ReviewReplyHotel {
  id            String             @id @default(cuid())
  content       String
  review        HotelCrawlReview   @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime           @default(now())
  updateAt      DateTime           @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyHotel?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyHotel[] @relation("ReplyToParent")

  @@map("replies_hotel")
}

model ReviewReplyTour {
  id            String            @id @default(cuid())
  content       String
  review        TourReview        @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  createAt      DateTime          @default(now())
  updateAt      DateTime          @updatedAt
  parentReplyId String?
  parentReply   ReviewReplyTour?  @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies       ReviewReplyTour[] @relation("ReplyToParent")

  @@map("replies_tour")
}

model CustomLocation {
  id          String    @id @default(cuid())
  name        String
  description String
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  tours       Tour[]
  userId      String
  user        User?     @relation(fields: [userId], references: [id])

  @@map("locations")
}

model UserOnTour {
  userId String
  users  User   @relation(fields: [userId], references: [id])
  tourId String
  tours  Tour   @relation(fields: [tourId], references: [id])

  @@id([userId, tourId])
  @@map("user_on_tours")
}

model UserOnFlightCrawl {
  userId        String
  users         User        @relation(fields: [userId], references: [id])
  flightCrawlId String
  flightCrawls  FlightCrawl @relation(fields: [flightCrawlId], references: [id])

  @@id([userId, flightCrawlId])
  @@map("user_on_flight_crawls")
}

model UserOnHotelCrawl {
  userId       String
  users        User       @relation(fields: [userId], references: [id])
  hotelCrawlId String
  hotelCrawls  HotelCrawl @relation(fields: [hotelCrawlId], references: [id])

  @@id([userId, hotelCrawlId])
  @@map("user_on_hotel_crawls")
}
