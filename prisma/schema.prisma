generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  phone           String?
  address         String?
  name            String
  createAt        DateTime  @default(now())
  updateAt        DateTime? @updatedAt
  confirmPassword String?
  roleId   String?
  role     Role?    @relation(fields: [roleId], references: [id])

  flights  UserOnFlight[]
  tours    UserOnTour[]

  // reviews         Review[]
  hotels Hotel[] 

  @@map("users")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model Hotel {
  id              String    @id @default(cuid())
  name            String
  address         String
  createAt        DateTime  @default(now())
  updateAt        DateTime? @updatedAt
  evaluate        String?
  price           String 
  description     String
  images          String
  image_two       String?
  image_three     String?
  image_four      String?


  users  User     @relation(fields: [userId], references: [id])
  userId          String
  // reviews         Review[]

  @@map("hotels")
}


model Review {
  id              String    @id @default(cuid())
  message         String
  createAt        DateTime  @default(now())
  updateAt        DateTime? @updatedAt
  userId          String
  // users           User      @relation(fields: [userId], references: [id])
  // hotelId         String
  // hotels          Hotel     @relation(fields: [hotelId], references: [id])

  @@map("reviews")
}


model Flight {
  id              String    @id @default(cuid())
  name            String
  createAt        DateTime  @default(now())
  updateAt        DateTime? @updatedAt
  userId          String
  description     String
  price           String
  startDate       String
  endDate         String
  perios          String
  images          String

  users           UserOnFlight[]

  @@map("flights")
}


  model Tour {
    id          String        @id @default(cuid())
    name        String
    description String
    userId     String
    image       String
    location    String
    price       Float?
    createAt        DateTime  @default(now())
    updateAt        DateTime? @updatedAt
    remainingCount  Int?  
    count       String?
    cuisine String?
    suitable_subject String?
    vchouer String?
    time_out String?
    ideal_time String?
    image2 String?
    image3 String?
    image4 String?
    transport String?
    hotel String?
    starting_gate String?
    sight_seeing String?


    users  UserOnTour[]

    @@map("tour")
  }


model UserOnFlight {
  userId          String
  users           User      @relation(fields: [userId], references: [id])
  flightId        String
  flights         Flight    @relation(fields: [flightId], references: [id])

  @@id([userId, flightId])
  @@map("user_on_flights")
}

model UserOnTour {
  userId          String
  users           User      @relation(fields: [userId], references: [id])
  tourId          String
  tours           Tour      @relation(fields: [tourId], references: [id])

  @@id([userId, tourId])
  @@map("user_on_tours")
}