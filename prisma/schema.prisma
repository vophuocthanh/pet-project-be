generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  phone           String?
  address         String?
  avatar          String?
  name            String
  date_of_birth   String?
  country         String?
  createAt        DateTime  @default(now())
  updateAt        DateTime? @updatedAt
  confirmPassword String?
  roleId          String?
  verificationCode String? 
  verificationCodeExpiresAt DateTime?
  isVerified       Boolean  @default(false)
  role            Role?     @relation(fields: [roleId], references: [id])

  bookings  Booking[]
  flights       UserOnFlight[]
  tours         UserOnTour[]
  hotels        UserOnHotel[]
  hotelReviews  HotelReview[]
  flightReviews FlightReview[]
  tourReviews   TourReview[]
  transactions  Transaction[]
  location      CustomLocation[]
  reviewReply ReviewReplyFlight[]
  reviewReplyTour ReviewReplyTour[]
  reviewReplyHotel ReviewReplyHotel[]
  UserFlightFavorite UserFlightFavorite[]

  @@map("users")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model Hotel {
  id          String         @id @default(cuid())
  name        String
  userId      String
  address     String
  createAt    DateTime       @default(now())
  updateAt    DateTime?      @updatedAt
  evaluate    String?
  price       String
  description String
  images      String
  image_2     String?
  image_3     String?
  image_4     String?
  image_5     String?
  locationId  String
  rating      Float?          @default(1)

  location    CustomLocation @relation(fields: [locationId], references: [id])

  bookings  Booking[]
  users          UserOnHotel[]
  hotelReviews   HotelReview[]
  transactions   Transaction[]
  AmenityToHotel AmenityToHotel[]

  @@map("hotels")
}


model HotelCrawl {
  id         String   @id @default(uuid())
  hotel_names String
  location   String
  price      String?
  score_hotels String?
  number_rating String?
  star_number String?
  received_time String
  giveback_time String
  description String
  hotel_link String
  place String

  @@map("hotel-crawl")
}


model Airline {
  id        String   @id @default(uuid())
  name      String   @unique
  logo      String
  description String?
  createAt  DateTime @default(now())
  updateAt  DateTime? @updatedAt
  flights   Flight[]

  @@map("airlines")
}

model Flight {
  id          String    @id @default(cuid())
  name        String
  userId      String
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  description String
  price       Float?
  startDate   String
  endDate     String
  perios      String
  images      String
  rating      Float?   @default(1)
  airlineId String
  airline   Airline @relation(fields: [airlineId], references: [id])

  departureLocation String? 
  destinationLocation String? 
  
  isFavorite   Boolean?  @default(false)

  bookings  Booking[]
  users         UserOnFlight[]
  flightReviews FlightReview[]
  transactions  Transaction[]
  UserFlightFavorite UserFlightFavorite[]

  @@map("flights")
}

model FlightCrawl {
  id          String   @id @default(uuid())
  brand       String
  price       Float
  start_time  String
  start_day   DateTime
  end_day     DateTime
  end_time    String
  trip_time   String
  take_place  String
  destination String
  trip_to     String
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  @@map("FlightCrawl")
}


model UserFlightFavorite {
  id        String  @id @default(uuid())
  userId    String
  flightId  String
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id])
  flight Flight @relation(fields: [flightId], references: [id])
  
  @@unique([userId, flightId])

  @@map("user_flight_favorites") 
}


model Tour {
  id             String         @id @default(cuid())
  name           String
  userId         String
  description   String?
  locationId     String
  location       CustomLocation @relation(fields: [locationId], references: [id])
  price          Float?
  createAt       DateTime       @default(now())
  updateAt       DateTime?      @updatedAt
  remainingCount Int?
  image          String
  image_2        String?
  image_3        String?
  image_4        String?
  image_5        String?
  images         String[]
  transport      String?
  hotel          String?
  startLocation  String?
  endLocation    String?
  rating         Float?        @default(1)


  bookings  Booking[]
  users        UserOnTour[]
  tourReviews  TourReview[]
  transactions Transaction[]

  @@map("tours")
}

model Booking {
  id        String   @id @default(uuid())
  flightId  String?  
  hotelId   String?  
  tourId    String?  
  userId    String
  flight    Flight?  @relation(fields: [flightId], references: [id])
  hotel     Hotel?   @relation(fields: [hotelId], references: [id])
  tour      Tour?    @relation(fields: [tourId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("bookings")
}

model HotelReview {
  id       String    @id @default(cuid())
  content  String
  rating   Float?      @default(1)
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  userId   String
  users    User      @relation(fields: [userId], references: [id])
  hotelId  String
  hotels   Hotel     @relation(fields: [hotelId], references: [id])
  reviewReplyHotel ReviewReplyHotel[]

  @@map("hotel_reviews")
}

model FlightReview {
  id       String    @id @default(cuid())
  content  String
  rating   Float?      @default(1)
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  userId   String
  users    User      @relation(fields: [userId], references: [id])
  flightId String
  flights  Flight    @relation(fields: [flightId], references: [id])

  reviewReply ReviewReplyFlight[]
  
  @@map("flight_reviews")
}


model TourReview {
  id       String    @id @default(cuid())
  content  String
  rating   Float?      @default(1)
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  userId   String
  users    User      @relation(fields: [userId], references: [id])
  tourId   String
  tours    Tour      @relation(fields: [tourId], references: [id])
  
  reviewReplyTour ReviewReplyTour[]

  @@map("tour_reviews")
}

model ReviewReplyFlight {
  id        String          @id @default(cuid())
  content   String
  review    FlightReview    @relation(fields: [reviewId], references: [id])
  reviewId  String
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  createAt  DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  parentReplyId String?     
  parentReply   ReviewReplyFlight? @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies   ReviewReplyFlight[]   @relation("ReplyToParent")

  @@map("replies_flight")
}


model ReviewReplyTour {
  id        String          @id @default(cuid())
  content   String
  review    TourReview    @relation(fields: [reviewId], references: [id])
  reviewId  String
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  createAt  DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  parentReplyId String?     
  parentReply   ReviewReplyTour? @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies   ReviewReplyTour[]   @relation("ReplyToParent")

  @@map("replies_tour")
}


model ReviewReplyHotel {
  id        String          @id @default(cuid())
  content   String
  review    HotelReview    @relation(fields: [reviewId], references: [id])
  reviewId  String
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  createAt  DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  parentReplyId String?     
  parentReply   ReviewReplyHotel? @relation("ReplyToParent", fields: [parentReplyId], references: [id])
  replies   ReviewReplyHotel[]   @relation("ReplyToParent")

  @@map("replies_hotel")
}


model CustomLocation {
  id          String    @id @default(cuid())
  name        String
  description String
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  hotels      Hotel[]
  tours       Tour[]
  userId      String
  user        User?     @relation(fields: [userId], references: [id])

  @@map("locations")
}

model Transaction {
  id       String   @id @default(cuid())
  amount   Float
  date     DateTime @default(now())
  userId   String
  users    User     @relation(fields: [userId], references: [id])
  hotelId  String?
  hotels   Hotel?   @relation(fields: [hotelId], references: [id])
  flightId String?
  flights  Flight?  @relation(fields: [flightId], references: [id])
  tourId   String?
  tours    Tour?    @relation(fields: [tourId], references: [id])

  @@map("transactions")
}

model Amenity {
  id             String           @id @default(cuid())
  name           String
  description    String
  AmenityToHotel AmenityToHotel[]

  @@map("amenities")
}

model UserOnFlight {
  userId   String
  users    User   @relation(fields: [userId], references: [id])
  flightId String
  flights  Flight @relation(fields: [flightId], references: [id])

  @@id([userId, flightId])
  @@map("user_on_flights")
}

model UserOnTour {
  userId String
  users  User   @relation(fields: [userId], references: [id])
  tourId String
  tours  Tour   @relation(fields: [tourId], references: [id])

  @@id([userId, tourId])
  @@map("user_on_tours")
}

model UserOnHotel {
  userId  String
  users   User   @relation(fields: [userId], references: [id])
  hotelId String
  hotels  Hotel  @relation(fields: [hotelId], references: [id])

  @@id([userId, hotelId])
  @@map("user_on_hotels")
}

model AmenityToHotel {
  amenityId String
  hotelId   String
  amenity   Amenity @relation(fields: [amenityId], references: [id])
  hotel     Hotel   @relation(fields: [hotelId], references: [id])

  @@id([amenityId, hotelId])
  @@map("amenity_to_hotel")
}
